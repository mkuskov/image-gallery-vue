{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSwitch/VSwitch.tsx"],
  "sourcesContent": ["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { filterControlProps, makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref } from 'vue'\nimport { defineComponent, filterInputAttrs, getUid, useRender } from '@/util'\n\nexport const VSwitch = defineComponent({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': () => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = getUid()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [controlProps, _2] = filterControlProps(props)\n      const control = ref<VSelectionControl>()\n\n      function onClick () {\n        control.value?.input?.click()\n      }\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n          ]}\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VSelectionControl\n                ref={ control }\n                { ...controlProps }\n                v-model={ model.value }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                type=\"checkbox\"\n                onUpdate:modelValue={ onChange }\n                aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                { ...controlAttrs }\n              >\n                {{\n                  ...slots,\n                  default: () => (<div class=\"v-switch__track\" onClick={ onClick }></div>),\n                  input: ({ textColorClasses, textColorStyles }) => (\n                    <div\n                      class={[\n                        'v-switch__thumb',\n                        textColorClasses.value,\n                      ]}\n                      style={ textColorStyles.value }\n                    >\n                      { props.loading && (\n                        <LoaderSlot\n                          name=\"v-switch\"\n                          active\n                          color={ isValid.value === false ? undefined : loaderColor.value }\n                        >\n                          { slotProps => (\n                            slots.loader\n                              ? slots.loader(slotProps)\n                              : (\n                                  <VProgressCircular\n                                    active={ slotProps.isActive }\n                                    color={ slotProps.color }\n                                    indeterminate\n                                    size=\"16\"\n                                    width=\"2\"\n                                  />\n                              )\n                          )}\n                        </LoaderSlot>\n                      ) }\n                    </div>\n                  ),\n                }}\n              </VSelectionControl>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"],
  "mappings": "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",
  "names": ["VSwitch", "defineComponent", "name", "inheritAttrs", "props", "indeterminate", "Boolean", "inset", "flat", "loading", "type", "String", "default", "makeVInputProps", "makeSelectionControlProps", "emits", "focused", "val", "setup", "attrs", "slots", "useProxiedModel", "model", "loaderClasses", "useLoader", "isFocused", "focus", "blur", "useFocus", "loaderColor", "computed", "color", "uid", "getUid", "id", "onChange", "value", "useRender", "inputAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "filterInputProps", "controlProps", "_2", "filterControlProps", "control", "ref", "onClick", "input", "click", "messagesId", "isDisabled", "isReadonly", "isValid", "undefined", "textColorClasses", "textColorStyles", "slotProps", "loader", "isActive"]
}
