import {
  makeLocationProps,
  makePositionProps,
  useLocation,
  usePosition
} from "./chunk-E3USFOQV.js";
import {
  VProgressCircular
} from "./chunk-32SGRJXB.js";
import {
  makeGroupItemProps,
  makeGroupProps,
  useGroup,
  useGroupItem
} from "./chunk-SKT67U2H.js";
import {
  VDefaultsProvider,
  genOverlays,
  makeBorderProps,
  makeDimensionProps,
  makeElevationProps,
  makeRouterProps,
  makeVariantProps,
  useBorder,
  useDimension,
  useElevation,
  useLink,
  useVariant
} from "./chunk-O4EPDE4V.js";
import {
  Ripple
} from "./chunk-PM5D4OA2.js";
import {
  makeDensityProps,
  makeLoaderProps,
  makeRoundedProps,
  useDensity,
  useLoader,
  useRounded
} from "./chunk-L7MUEJPA.js";
import {
  VIcon
} from "./chunk-TMVV4GI3.js";
import {
  makeSizeProps,
  makeTagProps,
  useSize
} from "./chunk-SZGMNFLF.js";
import {
  IconValue
} from "./chunk-BIQ6OIWY.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-WIO2SZLM.js";
import {
  defineComponent,
  genericComponent,
  provideDefaults,
  useRender
} from "./chunk-XZSJQWJU.js";
import {
  computed,
  createVNode,
  nextTick,
  resolveDirective,
  toRef,
  watch,
  withDirectives
} from "./chunk-HEFM7GRK.js";

// node_modules/vuetify/lib/components/VBtn/VBtn.mjs
import "C:/Users/mkuskov/Desktop/project/image-gallery-vue/image-gallery-vue/node_modules/vuetify/lib/components/VBtn/VBtn.css";

// node_modules/vuetify/lib/components/VBtnToggle/VBtnToggle.mjs
import "C:/Users/mkuskov/Desktop/project/image-gallery-vue/image-gallery-vue/node_modules/vuetify/lib/components/VBtnToggle/VBtnToggle.css";

// node_modules/vuetify/lib/components/VBtnGroup/VBtnGroup.mjs
import "C:/Users/mkuskov/Desktop/project/image-gallery-vue/image-gallery-vue/node_modules/vuetify/lib/components/VBtnGroup/VBtnGroup.css";
var VBtnGroup = defineComponent({
  name: "VBtnGroup",
  props: {
    divided: Boolean,
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...makeThemeProps(),
    ...makeVariantProps()
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    provideDefaults({
      VBtn: {
        height: "auto",
        color: toRef(props, "color"),
        density: toRef(props, "density"),
        flat: true,
        variant: toRef(props, "variant")
      }
    });
    useRender(() => {
      return createVNode(props.tag, {
        "class": ["v-btn-group", {
          "v-btn-group--divided": props.divided
        }, themeClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, roundedClasses.value]
      }, slots);
    });
  }
});

// node_modules/vuetify/lib/components/VBtnToggle/VBtnToggle.mjs
var VBtnToggleSymbol = Symbol.for("vuetify:v-btn-toggle");
var VBtnToggle = genericComponent()({
  name: "VBtnToggle",
  props: makeGroupProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      isSelected,
      next,
      prev,
      select,
      selected
    } = useGroup(props, VBtnToggleSymbol);
    useRender(() => {
      var _slots$default;
      return createVNode(VBtnGroup, {
        "class": "v-btn-toggle"
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
          isSelected,
          next,
          prev,
          select,
          selected
        })]
      });
    });
    return {
      next,
      prev,
      select
    };
  }
});

// node_modules/vuetify/lib/composables/selectLink.mjs
function useSelectLink(link, select) {
  watch(() => {
    var _link$isActive;
    return (_link$isActive = link.isActive) == null ? void 0 : _link$isActive.value;
  }, (isActive) => {
    if (link.isLink.value && isActive && select) {
      nextTick(() => {
        select(true);
      });
    }
  }, {
    immediate: true
  });
}

// node_modules/vuetify/lib/components/VBtn/VBtn.mjs
var VBtn = defineComponent({
  name: "VBtn",
  directives: {
    Ripple
  },
  props: {
    active: {
      type: Boolean,
      default: void 0
    },
    symbol: {
      type: null,
      default: VBtnToggleSymbol
    },
    flat: Boolean,
    icon: [Boolean, String, Function, Object],
    prependIcon: IconValue,
    appendIcon: IconValue,
    block: Boolean,
    stacked: Boolean,
    ripple: {
      type: Boolean,
      default: true
    },
    ...makeBorderProps(),
    ...makeRoundedProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeGroupItemProps(),
    ...makeLoaderProps(),
    ...makeLocationProps(),
    ...makePositionProps(),
    ...makeRouterProps(),
    ...makeSizeProps(),
    ...makeTagProps({
      tag: "button"
    }),
    ...makeThemeProps(),
    ...makeVariantProps({
      variant: "elevated"
    })
  },
  emits: {
    "group:selected": (val) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      locationStyles
    } = useLocation(props);
    const {
      positionClasses
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props);
    const group = useGroupItem(props, props.symbol, false);
    const link = useLink(props, attrs);
    const isActive = computed(() => {
      var _link$isActive;
      return props.active !== false && (props.active || ((_link$isActive = link.isActive) == null ? void 0 : _link$isActive.value) || (group == null ? void 0 : group.isSelected.value));
    });
    const isDisabled = computed(() => (group == null ? void 0 : group.disabled.value) || props.disabled);
    const isElevated = computed(() => {
      return props.variant === "elevated" && !(props.disabled || props.flat || props.border);
    });
    useSelectLink(link, group == null ? void 0 : group.select);
    useRender(() => {
      var _slots$prepend, _slots$default, _slots$append, _slots$loader;
      const Tag = link.isLink.value ? "a" : props.tag;
      const hasColor = !group || group.isSelected.value;
      const hasPrepend = !!(props.prependIcon || slots.prepend);
      const hasAppend = !!(props.appendIcon || slots.append);
      const hasIcon = !!(props.icon && props.icon !== true);
      return withDirectives(createVNode(Tag, {
        "type": Tag === "a" ? void 0 : "button",
        "class": ["v-btn", group == null ? void 0 : group.selectedClass.value, {
          "v-btn--active": isActive.value,
          "v-btn--block": props.block,
          "v-btn--disabled": isDisabled.value,
          "v-btn--elevated": isElevated.value,
          "v-btn--flat": props.flat,
          "v-btn--icon": !!props.icon,
          "v-btn--loading": props.loading,
          "v-btn--stacked": props.stacked
        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : void 0, densityClasses.value, elevationClasses.value, loaderClasses.value, positionClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value],
        "style": [hasColor ? colorStyles.value : void 0, dimensionStyles.value, locationStyles.value, sizeStyles.value],
        "disabled": isDisabled.value || void 0,
        "href": link.href.value,
        "onClick": (e) => {
          var _link$navigate;
          if (isDisabled.value)
            return;
          (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);
          group == null ? void 0 : group.toggle();
        }
      }, {
        default: () => [genOverlays(true, "v-btn"), !props.icon && hasPrepend && createVNode(VDefaultsProvider, {
          "key": "prepend",
          "defaults": {
            VIcon: {
              icon: props.prependIcon
            }
          }
        }, {
          default: () => [createVNode("span", {
            "class": "v-btn__prepend"
          }, [((_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)) ?? createVNode(VIcon, null, null)])]
        }), createVNode("span", {
          "class": "v-btn__content",
          "data-no-activator": ""
        }, [createVNode(VDefaultsProvider, {
          "key": "content",
          "defaults": {
            VIcon: {
              icon: hasIcon ? props.icon : void 0
            }
          }
        }, {
          default: () => [((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)) ?? (hasIcon && createVNode(VIcon, {
            "key": "icon"
          }, null))]
        })]), !props.icon && hasAppend && createVNode(VDefaultsProvider, {
          "key": "append",
          "defaults": {
            VIcon: {
              icon: props.appendIcon
            }
          }
        }, {
          default: () => [createVNode("span", {
            "class": "v-btn__append"
          }, [((_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)) ?? createVNode(VIcon, null, null)])]
        }), !!props.loading && createVNode("span", {
          "key": "loader",
          "class": "v-btn__loader"
        }, [((_slots$loader = slots.loader) == null ? void 0 : _slots$loader.call(slots)) ?? createVNode(VProgressCircular, {
          "color": typeof props.loading === "boolean" ? void 0 : props.loading,
          "indeterminate": true,
          "size": "23",
          "width": "2"
        }, null)])]
      }), [[resolveDirective("ripple"), !isDisabled.value && props.ripple, null]]);
    });
    return {};
  }
});

export {
  VBtn
};
//# sourceMappingURL=chunk-PCVJF4MD.js.map
